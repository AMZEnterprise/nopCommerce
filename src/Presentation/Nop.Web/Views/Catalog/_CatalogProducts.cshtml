@model CatalogProductsModel

@{
    Html.AddScriptParts(ResourceLocation.Footer, "~/js/public.ajaxfilters.js");
}

@if (Model.Products.Count > 0)
{
    <div class="products-container">
        @await Html.PartialAsync("_ProductsInGridOrLines", Model)
    </div>
}

@{ 
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }
}

<script asp-location="Footer">
    AjaxFilters.init({
        fetchUrl: '@Html.Raw(Url.Action("GetProducts", "Catalog"))',
        categoryId: @currentCategoryId,
        manufacturerId: @currentManufacturerId
    });
</script>